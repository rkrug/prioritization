# -*- org-babel-tangled-file: t; org-babel-tangle-run-postTangleScript: t; -*-

#+TITLE:     prioritization.org
#+AUTHOR:    Rainer M Krug
#+EMAIL:     Rainer@krugs.de
#+DESCRIPTION: R Package Development Helpers
#+KEYWORDS: 

:CONFIG:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 

#+TODO: TODO OPTIMIZE TOGET COMPLETE WAIT VERIFY CHECK CODE DOCUMENTATION | DONE RECEIVED CANCELD 

#+STARTUP: indent hidestars nohideblocks
#+DRAWERS: HIDDEN PROPERTIES STATE CONFIG BABEL OUTPUT LATEXHEADER HTMLHEADER
#+STARTUP: nohidestars hideblocks
:END:
:HTMLHEADER:
#+begin_html
  <div id="subtitle" style="float: center; text-align: center;">
  <p>
Org-babel support for building 
  <a href="http://www.r-project.org/">R</a> packages
  </p>
  <p>
  <a href="http://www.r-project.org/">
  <img src="http://www.r-project.org/Rlogo.jpg"/>
  </a>
  </p>
  </div>
#+end_html
:END:
:LATEXHEADER:
#+LATEX_HEADER: \usepackage{rotfloat}
#+LATEX_HEADER: \definecolor{light-gray}{gray}{0.9}
#+LATEX_HEADER: \lstset{%
#+LATEX_HEADER:     basicstyle=\ttfamily\footnotesize,       % the font that is used for the code
#+LATEX_HEADER:     tabsize=4,                       % sets default tabsize to 4 spaces
#+LATEX_HEADER:     numbers=left,                    % where to put the line numbers
#+LATEX_HEADER:     numberstyle=\tiny,               % line number font size
#+LATEX_HEADER:     stepnumber=0,                    % step between two line numbers
#+LATEX_HEADER:     breaklines=true,                 %!! don't break long lines of code
#+LATEX_HEADER:     showtabs=false,                  % show tabs within strings adding particular underscores
#+LATEX_HEADER:     showspaces=false,                % show spaces adding particular underscores
#+LATEX_HEADER:     showstringspaces=false,          % underline spaces within strings
#+LATEX_HEADER:     keywordstyle=\color{blue},
#+LATEX_HEADER:     identifierstyle=\color{black},
#+LATEX_HEADER:     stringstyle=\color{green},
#+LATEX_HEADER:     commentstyle=\color{red},
#+LATEX_HEADER:     backgroundcolor=\color{light-gray},   % sets the background color
#+LATEX_HEADER:     columns=fullflexible,  
#+LATEX_HEADER:     basewidth={0.5em,0.4em}, 
#+LATEX_HEADER:     captionpos=b,                    % sets the caption position to `bottom'
#+LATEX_HEADER:     extendedchars=false              %!?? workaround for when the listed file is in UTF-8
#+LATEX_HEADER: }
:END:
:BABEL:
#+PROPERTY: exports code
#+PROPERTY: comments yes
#+PROPERTY: padline no
#+PROPERTY: var MAJORVERSION=0
#+PROPERTY: var+ MINORVERSION=0
#+PROPERTY: var+ PATCHVERSION=1
#+PROPERTY: var+ GITHASH="testhash" 
#+PROPERTY: var+ GITCOMMITDATE="testdate"
:END:

* Internal configurations                      :noexport:
** Evaluate to run post tangle script
#+begin_src emacs-lisp :results silent :tangle no :exports none
  (add-hook 'org-babel-post-tangle-hook
            (
             lambda () 
                    (call-process-shell-command "./postTangleScript.sh" nil 0 nil)
  ;;              (async-shell-command "./postTangleScript.sh")
  ;;              (ess-load-file (save-window-excursion (replace-regexp-in-string ".org" ".R" buffer-file-name)))))
  ;;              (ess-load-file "nsa.R")))
  ;;              (ess-load-file "spreadSim.R")
                    )
            )
#+end_src

** Post tangle script
#+begin_src sh :results output :tangle ./postTangleScript.sh :var VER=(vc-working-revision (buffer-file-name)) :var STATE=(vc-state (or (buffer-file-name) org-current-export-file))
  sed -i '' s/MAJORVERSION/$MAJORVERSION/ ./DESCRIPTION
  sed -i '' s/MINORVERSION/$MINORVERSION/ ./DESCRIPTION
  sed -i '' s/PATCHVERSION/$PATCHVERSION/ ./DESCRIPTION
  sed -i '' s/TODAYSDATE/`date +%Y-%m-%d_%H-%M`/ ./DESCRIPTION

  sed -i '' s/MAJORVERSION/$MAJORVERSION/ ./prioritization-package.R
  sed -i '' s/MINORVERSION/$MINORVERSION/ ./prioritization-package.R
  sed -i '' s/PATCHVERSION/$PATCHVERSION/ ./prioritization-package.R
  sed -i '' s/TODAYSDATE/`date +%Y-%m-%d_%H-%M`/ ./prioritization-package.R

  Rscript -e "library(roxygen2);roxygenize('./', copy.package=FALSE, unlink.target=FALSE)"
  rm -f ./postTangleScript.sh
#+end_src

#+RESULTS:
: Updating collate directive in  /Users/rainerkrug/Documents/Projects/R-Packages/prioritization/DESCRIPTION 
: Updating namespace directives
: Writing prioCellByValuesGRASS.Rd


* gitignore file (./.gitignore)
:PROPERTIES:
:tangle: ./.gitignore
:comments: no
:no-expand: TRUE
:shebang:
:padline: no
:END: 
#+begin_src gitignore
,,*#prioritization.*
prioritization.*
!prioritization.org*
,,*.o
,,*.so
,,*.rds
.#*
#*
,,*#
,,*~
/.*
#+end_src

* Git Revision info
Complete version info
#+begin_src sh :exports results :results output replace 
  echo "Version     : " $MAJORVERSION.$MINORVERSION-$PATCHVERSION
  echo "Commit date : " `git show -s --format="%ci" HEAD`
  echo "git HASH    : " `git rev-parse HEAD`
  echo "git status  : "
  git status
#+end_src

#+RESULTS:
: Version     :  .4-13
: Commit date :  2013-03-20 18:33:21 +0100
: git HASH    :  906d085c35b4b835082e4583c4134c5ddf7f1555
: git status  : 
: # On branch master
: nothing to commit, working directory clean



* Rbuildignore file (./.Rbuildignore)
:PROPERTIES:
:tangle: ./.Rbuildignore
:comments: no
:no-expand: TRUE
:shebang:
:padline: no
:END: 
#+begin_src fundamental
  .git
  ^.*\\.org$
  ^prioritization.
  .gitignore
  library
  version
  postTangleScript.sh
#+end_src




* Package Files
** DESCRIPTION
:PROPERTIES:
:tangle:   ./DESCRIPTION
:padline: no 
:no-expand: TRUE
:comments: no
:END:
#+begin_src fundamental
Package: prioritization
Type: Package
Title: Spatial Prioritization routines
Version: MAJORVERSION.MINORVERSION-PATCHVERSION
Date: TODAYSDATE
Author: Rainer M. Krug
Maintainer: Rainer M Krug <Rainer@krugs.de>
Description: Routines for spatial prioritization for alien clearing
Depends: spgrass6
License: GPL-3
LazyLoad: yes
#+end_src

** NAMESPACE
:PROPERTIES:
:tangle:   ./NAMESPACE
:padline: no 
:no-expand: TRUE
:comments: no
:END:
#+begin_src R
## useDynLib(prioritization)
exportPattern("^[[:alpha:]]+")
#+end_src

#+results:

** Package description (./R/package.R)
:PROPERTIES:
:tangle:   ./R/package.R
:eval: nil
:no-expand: TRUE
:comments: no
:END:
#+begin_src R
##' Routines for spatial prioritization for alien clearing
##'
##' This package is a collection of different spatial prioritization
##' routines to prioritize areas spatially
##' 
##' \tabular{ll}{
##' Package: \tab prioritization\cr
##' Type: \tab Package\cr
##' Version: \tab MAJORVERSION.MINORVERSION.PATCHVERSION\cr
##' Date: \tab TODAYSDATE\cr
##' License: \tab GPL (>= 2)\cr
##' LazyLoad: \tab yes\cr
##' }
##'
##' @name prioritization-package
##' @docType package
##' @author Rainer M Krug \email{Rainer@@krugs.de}
NULL
#+end_src


* R directory (./R)

** CHECK prioCellRandomGRASS
Needs to be tested!!!
:PROPERTIES:
:tangle:   ./R/prioCellRandomGRASS.R
:comments: yes
:no-expand: TRUE
:END:
#+begin_src R
##' Random prioritization of raster cells
##'
##' This function assignes randomly each cell a priority, i.e. a
##' value, between 0 and 1.
##'
##' This function is a wrapper aroung the function
##' \code{r.surf.random} with \code{MASK} used as the GRASS MASK for
##' the calculations.
##'
##' The function \bold{does not} respect the GRASS MASK as it uses the
##' parameter \code{MASK} as the MASK for the calculations.
##'
##' @usage prioCellRandomGRASS( output, MASK = NULL, overwrite = FALSE )
##' @name prioCellRandomGRASS
##' @title Random prioritization of raster cells
##' 
##' @param output name of output layer with prioritization
##' (0..1)
##' @param MASK name of the GRASS raster layer which will be used as
##' MASK. If it is \code{NULL}, the default, the existing MASK will be
##' used.
##' @param overwrite if \code{TRUE}, the output layer will be overwritten
##'
##' @return invisible outputLayerName
##' @author Dr Rainer M Krug \email{Rainer@@krugs.de}
prioCellRandomGRASS <- function(
    output,
    MASK = NULL,
    overwrite = FALSE
    ) {
    if (!is.null(MASK)) {
        execGRASS(
            "g.rename",
            rast = paste("MASK", "MASK.BAK", sep=",")
            )
        execGRASS(
            "g.rename",
            rast = paste(MASK, "MASK", sep=",")
            )
    }
    try(
        {
            if (overwrite) {
                flags <- "overwrite"
            } else {
                flags <- NULL
            }
            execGRASS(
                "r.surf.random",
                output = output,
                min = 0,
                max = 1,
                flags = flags
                )
        }
        )
    if (!is.null(MASK)) {
        execGRASS(
            "g.rename",
            rast = paste("MASK", MASK, sep=",")
            )
         execGRASS(
            "g.rename",
            rast = paste("MASK.BAK", "MASK", sep=",")
            )
    }
    invisible(output)
}

#+end_src

** CHECK prioCellAHPSingleGRASS
Needs to be tested!!!
:PROPERTIES:
:tangle:   ./R/prioCellAHPSingleGRASS.R
:comments: yes
:no-expand: TRUE
:END:
#+begin_src R
##' Prioritization based on rules from AHP
##'
##' Prioritization based on an integer input layer, reclass rules and
##' a final weight.  Either the \code{grassReclassRules} or the
##' \code{grassRecodeRules} have to be specified!
##'
##' @usage prioCellAHPSingleGRASS(input, output, grassReclassRules,
##' grassRecodeRules, oneEquals = 1000, weight, overwrite = FALSE)
##' @name prioCellAHPSingleGRASS
##' @title Prioritization based on rules from AHP
##' @param input name of input layer to be used as the basis of the
##' AHP prioritization
##' @param output name of output layer containing the priority values
##' @param grassReclassRules reclass rules as described in the
##' r.reclass help (GRASS). The values have to be integer values!
##' @param grassRecodeRules recode rules as described in the
##' r.recode help (GRASS).
##' @param oneEquals value specifying which of the integer values will
##' equal to one.  All values will be divided by this value.
##' @param weight final weight of the resulting prioritization.  All
##' values will be multiplied by this value
##' @param overwrite if \code{TRUE}, existing output ayer will be overwritte.
##' 
##' @return invisible rwturns name of output layer
##' @author Dr Rainer M Krug \email{Rainer@@krugs.de}
prioCellAHPSingleGRASS <- function(
    input,
    output,
    grassReclassRules,
    grassRecodeRules,
    oneEquals = 1000,
    weight,
    overwrite = FALSE
    ) {
    if ( length( execGRASS("g.mlist", type="rast", pattern=output, intern=TRUE) ) & !overwrite ) {
        stop(paste("Layer", output, "exists! Please specify 'overwrite=TRUE' or use different output name!"))
    } 
    if (!missing(grassReclassRules) & !missing(grassRecodeRules)) {
        stop("Only 'grassReclassRules' or 'grassRecodeRules' can be specified!")
    }
    if (missing(grassReclassRules) & missing(grassRecodeRules)) {
        stop("One of 'grassReclassRules' or 'grassRecodeRules' has to be specified specified!")
    }
    execGRASS
    op <- options()
    options(warn=-1)
    execGRASS(
        "g.remove",
        rast = output
        )
    options(op)
    if (!missing(grassReclassRules)) {
        execGRASS(
            "r.reclass",
            input = input,
            output = output,
            rules = "-",
            flags = "overwrite",
            Sys_input = grassReclassRules
            )
    } else {
        execGRASS(
            "r.recode",
            input = input,
            output = output,
            rules = "-",
            flags = "overwrite",
            Sys_input = grassRecodeRules
            )
        oneEquals <- 1
    }   
    execGRASS(
        "r.mapcalc",
        expression = paste(output, "=", "float(", output, " / ", oneEquals * weight, ")") ,
        flags = "overwrite",
        )
    invisible(output)
}
#+end_src

#+RESULTS:

** CHECK prioCellByValuesGRASS
Needs to be tested!!!
:PROPERTIES:
:tangle:   ./R/prioCellByValuesGRASS.R
:comments: yes
:no-expand: TRUE
:END:
#+begin_src R
##' Prioritization based on specific values
##'
##' Prioritization based on actual values specified and layer
##' containing values. If a cell contains a value listed in
##' \code{values}, the priority value of this cell will be
##' \code{prioValues\[1\]}, otherwise code{prioValues\[2\]}
##'
##' @usage prioCellByValuesGRASS(input, output, values, prioValues, oneEquals = 100,weight, overwrite=FALSE)
##' @name prioCellByValuesGRASS
##' @title Prioritization based on specific values
##' 
##' @param input name of layer containing input values
##' @param output name of output layer containing the priority values 
##' @param values values which should get priority value prioValues[1]
##' @param prioValues priority values, first one for in \code{values}, second one not
##' @param oneEquals value specifying which integer values will equal
##' to one.  All values will be divided by this value.
##' @param weight final weight of the resulting prioritization.  All
##' values will be multiplied by this value
##' @param overwrite if \code{TRUE}, output layer will be overwritten
##'
##' @return invisible output
##' @author Dr Rainer M Krug \email{Rainer@@krugs.de}
prioCellByValuesGRASS <- function(
    input,
    output,
    values,
    prioValues,
    oneEquals = 100, 
    weight,
    overwrite = FALSE
    ) {
    if ( length( execGRASS("g.mlist", type="rast", pattern=output, intern=TRUE) ) & !overwrite ) {
        stop(paste("Layer", output, "exists! Please specify 'overwrite=TRUE' or use different output name!"))
    } 
   rule <- paste(
       paste(
           paste(values, collapse=" "),
           prioValues[1], sep = " = "),
       "* = ", prioValues[2], sep="\n" )
    execGRASS(
        "r.reclass",
        input = input,
        output = output,
        rules = "-",
        Sys_input = rule,
        flags = "overwrite"
        )
    execGRASS(
        "r.mapcalc",
        expression = paste(output, "=", "float(", output, " / ", oneEquals * weight, ")") ,
        flags = "overwrite"
        )
    invisible(output)
}
#+end_src

#+RESULTS:

** CHECK prioCellThresholdGRASS
Needs to be tested!!!
:PROPERTIES:
:tangle:   ./R/prioCellThresholdGRASS.R
:comments: yes
:no-expand: TRUE
:END:
#+begin_src R
##' Prioritization based on thresholds of several layers
##'
##' Threshold prioritization based on different layers. The final priority value
##' for each cell is based on if the cell is in each layer above or
##' below the threshold.
##'
##' For each input layer, a temporary layer is created with the name
##' \code{tmp_input\[i\]} which is the \code{layerWeight\[i\]} if the value of \code{input\[i\]} is below \code{threshold}, otherwise it is 0.
##'
##' These temporary layers will not be deleted if \code{keepTemporaryLayers} is TRUE.
##'
##' In a final step, all temporarty layers \code{tmp_input\[i\]} will be added up and saved in \code{output}.
##'
##' @usage prioCellThresholdGRASS(input, output, layerWeights,
##' threshold, weight, keepTmpLayers = FALSE, overwrite = FALSE)
##' @name prioCellThresholdGRASS
##' @title Prioritization based on thresholds of several layers
##' 
##' @param input name of layer in GRASScontaining input values -
##' \bold{has to be the same length as \code{layerWeights}}
##' @param output name of output layers containing the priority values 
##' @param layerWeights weights for each \code{input} layer -
##' \bold{has to be the same length as \code{input}}
##' @param threshold value above which layer will be prioritized
##' @param weight final weight of the resulting prioritization.  All
##' values will be multiplied by this value
##' @param keepTmpLayers if \code{TRUE}, temporal layers will be kept
##' @param overwrite if \code{TRUE}, the output layer will be overwritten
##' 
##' @return invisibly returns output layer name
##' 
##' @author Dr Rainer M Krug \email{Rainer@@krugs.de}
prioCellThresholdGRASS <- function(
    input,
    output,
    layerWeights,
    threshold,
    weight,
    keepTmpLayers = FALSE,
    overwrite = FALSE
    ) {
    if ( length( execGRASS("g.mlist", type="rast", pattern=output, intern=TRUE) ) & !overwrite ) {
        stop(paste("Layer", output, "exists! Please specify 'overwrite=TRUE' or use different output name!"))
    } 
    op <- options()
    options(warn=-1)
    execGRASS(
        "g.remove",
        rast = output
        )
    options(op)
    names(layerWeights) <- input
    ols <- sapply(
        layerWeights,
        function(l) {
            il <- names(l)
            ol <- paste("tmp", il, sep="_")
            execGRASS(
                "r.recode",
                input = il,
                output = ol,
                rules = "-",
                flags = "overwrite",
                Sys_input = c(
                    paste(threshold, "*", l, sep=":"),
                    paste("*", threshold, 0, sep=":")
                    )
                )
            return(ol)
        }
        )
    execGRASS(
        "r.mapcalc",
        expression = paste(
            output,
            "=",
            "(", paste(ols, collapse = " + "), ") * weight)" ,
            ),
        flags = "overwrite"
        )
    if (!keepTmpLayers) {
        execGRASS(
            "g.remove",
            rast=paste(ols, collapse=",")
            )
    }
    invisible(output)
}
#+end_src


* TODO Tests
Write test functions
* TODO Vignette
The parameter for the prio
Write vignette
* package management                                               :noexport:
** check package
#+begin_src sh :results output
  CWD=`pwd`
  R CMD check pkg | sed 's/^*/ */'
#+end_src


** INSTALL package

#+begin_src sh :results output :var rckopts="--library=./Rlib"
  R CMD INSTALL $rckopts pkg
#+end_src

#+results:
: g++ -I/usr/share/R/include   -I"/home/rkrug/R/i486-pc-linux-gnu-library/2.13/Rcpp/include"   -fpic  -O3 -pipe  -g -c windDispCpp.cpp -o windDispCpp.o
: g++ -shared -o prioritization.so windDispCpp.o -L/home/rkrug/R/i486-pc-linux-gnu-library/2.13/Rcpp/lib -lRcpp -Wl,-rpath,/home/rkrug/R/i486-pc-linux-gnu-library/2.13/Rcpp/lib -L/usr/lib/R/lib -lR


** build package

#+begin_src sh :results output
  R CMD build ./
#+end_src

#+results:



** load library

#+begin_src R :session :results output :var libname=(file-name-directory buffer-file-name)
## customize the next line as needed: 
.libPaths(new = file.path(getwd(),"Rlib") )
require( basename(libname), character.only=TRUE)
#+end_src

#+results:

- this loads the library into an R session
- customize or delete the =.libPaths= line as desired 


: #+begin_src R :session :var libname=(file-name-directory buffer-file-name)
: .libPaths(new = file.path(getwd(),"Rlib") )
: require( basename(libname), character.only=TRUE)
: #+end_src

** grep require( 

- if you keep all your source code in this =.org= document, then you do not
  need to do this - instead just type =C-s require(=
- list package dependencies that might need to be dealt with

#+begin_src sh :results output
grep 'require(' R/*
#+end_src

: #+begin_src sh :results output
: grep 'require(' R/*
: #+end_src

** set up .Rbuildignore and man, R, and Rlib directories

- This document sits in the top level source directory. So, ignore it
  and its offspring when checking, installing and building.
- List all files to ignore under =#+results: rbi=  (including this
  one!). Regular expressions are allowed.
- Rlib is optional. If you want to INSTALL in the system directory,
  you own't need it.

: #+results: rbi
#+results: rbi
: Rpackage.*
: PATCHVERSION
: MAJORVERSION
: MINORVERSION

Only need to run this once (unless you add more ignorable files).

#+begin_src R :results output silent :var rbld=rbi 
dir.create("./prioritization")
cat(rbld,'\n', file="./.Rbuildignore")
dir.create("./man")
dir.create("./R")
dir.create("./src")
dir.create("./Rlib")
#+end_src

: #+begin_src R :results output silent :var rbld=rbi 
: cat(rbld,'\n', file=".Rbuildignore")
: dir.create("man")
: dir.create("R")
: dir.create("../Rlib")
: #+end_src

* Package structure and src languages                              :noexport:

- The top level directory may contain these files (and others):

| filename    | filetype      |
|-------------+---------------|
| INDEX       | text          |
| NAMESPACE   | R-like script |
| configure   | Bourne shell  |
| cleanup     | Bourne shell  |
| LICENSE     | text          |
| LICENCE     | text          |
| COPYING     | text          |
| NEWS        | text          |
| DESCRIPTION | [[http://www.debian.org/doc/debian-policy/ch-controlfields.html][DCF]]           |
|-------------+---------------|


 
   and subdirectories
| direname | types of files                                   |
|----------+--------------------------------------------------|
| R        | R                                                |
| data     | various                                          |
| demo     | R                                                |
| exec     | various                                          |
| inst     | various                                          |
| man      | Rd                                               |
| po       | poEdit                                           |
| src      | .c, .cc or .cpp, .f, .f90, .f95, .m, .mm, .M, .h |
| tests    | R, Rout                                          |
|----------+--------------------------------------------------|
|          |                                                  |
   
 [[info:emacs#Specifying%20File%20Variables][info:emacs#Specifying File Variables]]
